{"mappings":"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","sources":["<anon>","src/index.ts","src/frame.ts","src/axes.ts","src/plots/scatterplot.ts","src/plot.ts","src/plots/vectorplot.ts","src/label.ts","src/plots/vectorplot.params.ts","src/plots/base.config.ts","src/plots/vectorplot.config.ts","src/glyph.ts","src/data.ts"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire9513\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire9513\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n\nvar $ilwiq = parcelRequire(\"ilwiq\");\n\nvar $5Rd1x = parcelRequire(\"5Rd1x\");\n\nvar $ilwiq = parcelRequire(\"ilwiq\");\nconst $06989a4a8159123e$export$60bbd10bdffb2e81 = {\n    i: new (0, $ilwiq.Vector3)(1, 0, 0),\n    j: new (0, $ilwiq.Vector3)(0, 1, 0),\n    k: new (0, $ilwiq.Vector3)(0, 0, 1)\n};\nconst $06989a4a8159123e$export$f882155fad14bf27 = {\n    xy: {\n        normal: $06989a4a8159123e$export$60bbd10bdffb2e81.k,\n        unit: {\n            x: $06989a4a8159123e$export$60bbd10bdffb2e81.i,\n            y: $06989a4a8159123e$export$60bbd10bdffb2e81.j\n        }\n    },\n    xz: {\n        normal: $06989a4a8159123e$export$60bbd10bdffb2e81.j,\n        unit: {\n            x: $06989a4a8159123e$export$60bbd10bdffb2e81.i,\n            z: $06989a4a8159123e$export$60bbd10bdffb2e81.k\n        }\n    },\n    yz: {\n        normal: $06989a4a8159123e$export$60bbd10bdffb2e81.i,\n        unit: {\n            y: $06989a4a8159123e$export$60bbd10bdffb2e81.j,\n            z: $06989a4a8159123e$export$60bbd10bdffb2e81.k\n        }\n    }\n};\nclass $06989a4a8159123e$var$Axis extends (0, $ilwiq.ArrowHelper) {\n    constructor(direction, length){\n        super(direction, new (0, $ilwiq.Vector3)(0, 0, 0), length);\n    }\n}\nclass $06989a4a8159123e$export$387a78ab20784494 {\n    constructor(lengthX, lengthY, lengthZ){\n        this.lengthX = lengthX;\n        this.lengthY = lengthY;\n        this.lengthZ = lengthZ;\n        this.x = new $06989a4a8159123e$var$Axis(new (0, $ilwiq.Vector3)(1, 0, 0), this.lengthX * 1.1);\n        this.y = new $06989a4a8159123e$var$Axis(new (0, $ilwiq.Vector3)(0, 1, 0), this.lengthY * 1.1);\n        this.z = new $06989a4a8159123e$var$Axis(new (0, $ilwiq.Vector3)(0, 0, 1), this.lengthZ * 1.1);\n        this.setGrids();\n    }\n    setGrids() {\n        this.gridXZ = new (0, $ilwiq.GridHelper)(Math.max(this.lengthX, this.lengthZ));\n        this.gridXZ.position.setX(this.lengthX / 2);\n        this.gridXZ.position.setZ(this.lengthZ / 2);\n        this.gridXY = new (0, $ilwiq.GridHelper)(Math.max(this.lengthX, this.lengthY));\n        this.gridXY.position.setX(this.lengthX / 2);\n        this.gridXY.position.setY(this.lengthY / 2);\n        this.gridXY.rotateOnAxis(new (0, $ilwiq.Vector3)(1, 0, 0), Math.PI / 2);\n        this.gridYZ = new (0, $ilwiq.GridHelper)(Math.max(this.lengthY, this.lengthZ));\n        this.gridYZ.position.setY(this.lengthY / 2);\n        this.gridYZ.position.setZ(this.lengthZ / 2);\n        this.gridYZ.rotateOnAxis(new (0, $ilwiq.Vector3)(0, 0, 1), Math.PI / 2);\n    }\n}\n\n\nclass $f5cd7ec90b5fdafd$export$b89a827e9254211a extends (0, $ilwiq.Scene) {\n    // TODO: at the moment only one size bc grid can only be squared\n    // look into this for solution https://discourse.threejs.org/t/rectangular-gridhelper-possibility/37812\n    constructor(canvas, size = 10){\n        super();\n        this.canvas = canvas;\n        this.size = size;\n        this.observer = new ResizeObserver(()=>this.onCanvasResize());\n        this.scene = new (0, $ilwiq.Scene)();\n        this.scene.background = new (0, $ilwiq.Color)(0xffffff);\n        const { clientWidth: clientWidth, clientHeight: clientHeight } = canvas;\n        this.width = clientWidth;\n        this.height = clientHeight;\n        this.renderer = new (0, $ilwiq.WebGLRenderer)({\n            canvas: canvas\n        });\n        this.renderer.setSize(clientWidth, clientHeight);\n        this.setCamera(clientWidth, clientHeight);\n        this.setControls();\n        this.setAxes();\n        this.updateOnChanges();\n        this.update();\n    }\n    setCamera(width, height) {\n        this.camera = new (0, $ilwiq.PerspectiveCamera)(45, width / height, 0.1, 1000);\n        this.camera.position.set(this.size * 1.5, this.size * 1.2, this.size * 2.5);\n        this.scene.add(this.camera);\n    }\n    setControls() {\n        this.controls = new (0, $5Rd1x.OrbitControls)(this.camera, this.canvas);\n        this.controls.target.set(0, 0, 0);\n    }\n    setAxes() {\n        this.axes = new (0, $06989a4a8159123e$export$387a78ab20784494)(this.size, this.size, this.size);\n        this.scene.add(this.axes.x);\n        this.scene.add(this.axes.y);\n        this.scene.add(this.axes.z);\n        this.scene.add(this.axes.gridXY);\n        this.scene.add(this.axes.gridXZ);\n        this.scene.add(this.axes.gridYZ);\n    }\n    updateOnChanges() {\n        this.controls.addEventListener(\"change\", ()=>this.update());\n        this.observer.observe(this.canvas);\n    }\n    update() {\n        this.renderer.render(this.scene, this.camera);\n    }\n    capture() {\n        const base64 = this.canvas.toDataURL(\"img/png\");\n    }\n    async addPlot(plot) {\n        this.scene.add(...plot.getDrawables());\n        plot.getWritables().forEach((l)=>this.addLabel(l));\n        this.update();\n    }\n    addLabel(text) {\n        this.scene.add(text);\n        text.addEventListener(\"synccomplete\", ()=>{\n            this.update();\n        });\n    }\n    onCanvasResize() {\n        this.camera.aspect = this.width / this.height;\n        this.camera.updateProjectionMatrix();\n        this.renderer.setSize(this.width, this.height);\n        this.update();\n    }\n}\n\n\n\nvar $ilwiq = parcelRequire(\"ilwiq\");\nclass $fc905a1390663dee$export$c78ca4d5ae878870 {\n    getDrawables() {\n        return this.drawables;\n    }\n    getWritables() {\n        return this.writables;\n    }\n    constructor(){\n        this.drawables = [];\n        this.writables = [];\n    }\n}\n\n\nclass $21cbcb5ddd734726$export$eec270bd176da5f5 extends (0, $fc905a1390663dee$export$c78ca4d5ae878870) {\n    constructor(points, pointRadius = 0.2){\n        super();\n        this.drawables = points.map((v)=>{\n            const geometry = new (0, $ilwiq.SphereGeometry)(pointRadius);\n            const material = new (0, $ilwiq.MeshBasicMaterial)({\n                color: 0x00ff00\n            });\n            const obj = new (0, $ilwiq.Mesh)(geometry, material);\n            obj.position.set(v.x, v.y, v.z);\n            return obj;\n        });\n    }\n}\n\n\n\nvar $ilwiq = parcelRequire(\"ilwiq\");\n\n\nvar $gbdyO = parcelRequire(\"gbdyO\");\nclass $9405c84d589e06ee$export$b04be29aa201d4f5 extends (0, $gbdyO.Text) {\n    constructor(position, params){\n        super();\n        this.text = params.text;\n        this.fontSize = params.fontSize || 1;\n        this.position.x = position.x;\n        this.position.y = position.y;\n        this.position.z = position.z;\n        this.anchorX = params.anchorX || \"center\";\n        this.anchorY = params.anchorY || \"middle\";\n        this.color = params.color || 0x000000;\n    }\n}\n\n\n\nclass $f2d2a6934dfd06fc$export$e90020a4e0169311 {\n    valueOrDefault(value, defaultValue) {\n        return value === true ? defaultValue : value;\n    }\n}\n\n\nconst $de8a88f7be6904e3$export$30d6e1721bff0379 = {\n    line: {\n        type: \"solid\",\n        style: {\n            color: 0x000000\n        }\n    }\n};\nconst $de8a88f7be6904e3$export$27abc348677bda2c = {\n    line: {\n        type: \"dashed\",\n        style: {\n            color: 0x000000,\n            scale: 1,\n            dashSize: 0.25,\n            gapSize: 0.1\n        }\n    }\n};\n\n\nclass $c235d2e54e376d88$export$4d0e403091b9214b extends (0, $f2d2a6934dfd06fc$export$e90020a4e0169311) {\n    constructor(config){\n        super();\n        const { angle: angle, color: color, label: label, xy: xy, xz: xz, yz: yz } = config || {};\n        this.color = color || 0x000000;\n        this.label = label;\n        if (angle) this.angle = new $c235d2e54e376d88$export$a5f5a45be7554645(this.valueOrDefault(angle, (0, $de8a88f7be6904e3$export$30d6e1721bff0379)));\n        if (xy) this.xy = new $c235d2e54e376d88$export$5b78d04890b6d2a8(xy);\n        if (xz) this.xz = new $c235d2e54e376d88$export$5b78d04890b6d2a8(xz);\n        if (yz) this.yz = new $c235d2e54e376d88$export$5b78d04890b6d2a8(yz);\n    }\n}\nclass $c235d2e54e376d88$export$5b78d04890b6d2a8 extends (0, $f2d2a6934dfd06fc$export$e90020a4e0169311) {\n    constructor(plane){\n        super();\n        plane = this.valueOrDefault(plane, {\n            projection: true,\n            component: true,\n            projectionAngle: true\n        });\n        const { component: component, projection: projection, projectionAngle: projectionAngle } = plane;\n        if (projection) this.projection = new $c235d2e54e376d88$export$a5f5a45be7554645(this.valueOrDefault(projection, (0, $de8a88f7be6904e3$export$27abc348677bda2c)));\n        if (component) this.component = new $c235d2e54e376d88$export$a5f5a45be7554645(this.valueOrDefault(component, (0, $de8a88f7be6904e3$export$27abc348677bda2c)));\n        if (projectionAngle) this.projectionAngle = new $c235d2e54e376d88$export$a5f5a45be7554645(this.valueOrDefault(projectionAngle, (0, $de8a88f7be6904e3$export$27abc348677bda2c)));\n    }\n}\nclass $c235d2e54e376d88$export$a5f5a45be7554645 extends (0, $f2d2a6934dfd06fc$export$e90020a4e0169311) {\n    constructor({ line: line, label: label }){\n        super();\n        this.line = line || (0, $de8a88f7be6904e3$export$27abc348677bda2c).line;\n        this.label = label;\n    }\n}\n\n\nclass $7e14f190bf05e5b8$export$cb49ab3f965133d4 extends (0, $fc905a1390663dee$export$c78ca4d5ae878870) {\n    constructor(origin, target, config){\n        super();\n        this.origin = origin;\n        this.target = target;\n        this.config = new (0, $c235d2e54e376d88$export$4d0e403091b9214b)(config);\n        const vector = this.createVector(origin, target);\n        this.drawables.push(vector);\n        if (this.config.label) this.writables.push(this.createLabel(vector, this.config.label));\n        if (this.config.angle) {\n            const mainAngle = this.createAngleToTarget(\"y\", this.config?.angle?.line);\n            this.drawables.push(mainAngle);\n            if (this.config.angle?.label) this.writables.push(this.createLabel(mainAngle, this.config.angle.label));\n        }\n        for(const p in 0, $06989a4a8159123e$export$f882155fad14bf27){\n            const plane = p;\n            const conf = this.config[plane];\n            if (conf?.projection) {\n                const projection = this.createProjection(plane, conf.projection.line);\n                if (conf.projection.label) this.writables.push(this.createLabel(projection, conf.projection.label));\n                this.drawables.push(projection);\n            }\n            if (conf?.component) {\n                const component = this.createComponent(plane, conf.component.line);\n                if (conf.component.label) this.writables.push(this.createLabel(component, conf.component.label));\n                this.drawables.push(component);\n            }\n            if (conf?.projectionAngle) {\n                const projectionAngle = this.createAngleToProjection(plane, conf.projectionAngle.line);\n                if (conf.projectionAngle.label) this.writables.push(this.createLabel(projectionAngle, conf.projectionAngle.label));\n                this.drawables.push(projectionAngle);\n            }\n        }\n    }\n    createVector(origin, target) {\n        const length = Math.abs(origin.distanceTo(target));\n        return new (0, $ilwiq.ArrowHelper)(target.clone().normalize(), origin, length, this.config.color, length * 0.2, length * 0.1);\n    }\n    createAngleToProjection(planeIdx, config) {\n        const plane = (0, $06989a4a8159123e$export$f882155fad14bf27)[planeIdx];\n        const planeNormal = plane.normal;\n        const projectedVector = this.target.clone().projectOnPlane(planeNormal);\n        const radius = projectedVector.distanceTo(this.origin) * 0.5;\n        let initialRotation = 0;\n        let angleToProjection = projectedVector.angleTo((0, $06989a4a8159123e$export$60bbd10bdffb2e81).i);\n        if (planeIdx === \"xz\") {\n            initialRotation = -Math.PI / 2;\n            angleToProjection = projectedVector.angleTo((0, $06989a4a8159123e$export$60bbd10bdffb2e81).k);\n        }\n        if (planeIdx === \"yz\") {\n            initialRotation = Math.PI / 2;\n            angleToProjection = projectedVector.angleTo((0, $06989a4a8159123e$export$60bbd10bdffb2e81).j);\n        }\n        const curve = new (0, $ilwiq.EllipseCurve)(this.origin.x, this.origin.y, radius, radius, 0, angleToProjection, false, initialRotation);\n        const { type: linetype, style: linestyle } = config;\n        const LineMaterialType = linetype === \"dashed\" ? (0, $ilwiq.LineDashedMaterial) : (0, $ilwiq.LineBasicMaterial);\n        const material = new LineMaterialType(linestyle);\n        const geometry = new (0, $ilwiq.BufferGeometry)().setFromPoints(curve.getPoints(50));\n        const rotation = new (0, $ilwiq.Quaternion)().setFromUnitVectors((0, $06989a4a8159123e$export$60bbd10bdffb2e81).k, plane.normal);\n        geometry.applyQuaternion(rotation);\n        return new (0, $ilwiq.Line)(geometry, material);\n    }\n    createAngleToTarget(axis, config) {\n        const radius = this.target.clone().distanceTo(this.origin);\n        const projectedVector = this.target.clone().projectOnPlane((0, $06989a4a8159123e$export$60bbd10bdffb2e81).j);\n        const curve = new (0, $ilwiq.EllipseCurve)(this.origin.x, this.origin.y, radius, radius, 0, this.target.angleTo(projectedVector), false, 0);\n        const { type: linetype, style: linestyle } = config;\n        const LineMaterialType = linetype === \"dashed\" ? (0, $ilwiq.LineDashedMaterial) : (0, $ilwiq.LineBasicMaterial);\n        const material = new LineMaterialType(linestyle);\n        const geometry = new (0, $ilwiq.BufferGeometry)().setFromPoints(curve.getPoints(50));\n        geometry.applyQuaternion(new (0, $ilwiq.Quaternion)().setFromAxisAngle((0, $06989a4a8159123e$export$60bbd10bdffb2e81).j, -(0, $06989a4a8159123e$export$60bbd10bdffb2e81).i.angleTo(projectedVector)));\n        return new (0, $ilwiq.Line)(geometry, material);\n    }\n    createProjection(plane, config) {\n        const { type: linetype, style: linestyle } = config;\n        const LineMaterialType = linetype === \"dashed\" ? (0, $ilwiq.LineDashedMaterial) : (0, $ilwiq.LineBasicMaterial);\n        const lineMaterial = new LineMaterialType(linestyle);\n        const planeNormal = (0, $06989a4a8159123e$export$f882155fad14bf27)[plane].normal;\n        const projectedVector = this.target.clone().projectOnPlane(planeNormal);\n        const projectionGeometry = new (0, $ilwiq.BufferGeometry)().setFromPoints([\n            projectedVector,\n            this.origin\n        ]);\n        return new (0, $ilwiq.Line)(projectionGeometry, lineMaterial).computeLineDistances();\n    }\n    createLabel(obj, config) {\n        const box = new (0, $ilwiq.BoxHelper)(obj);\n        box.geometry.computeBoundingBox();\n        const bbox = box.geometry.boundingBox;\n        return new (0, $9405c84d589e06ee$export$b04be29aa201d4f5)(bbox.max, {\n            ...config\n        });\n    }\n    createComponent(plane, config) {\n        const { type: linetype, style: linestyle } = config;\n        const LineMaterialType = linetype === \"dashed\" ? (0, $ilwiq.LineDashedMaterial) : (0, $ilwiq.LineBasicMaterial);\n        const lineMaterial = new LineMaterialType(linestyle);\n        const planeNormal = (0, $06989a4a8159123e$export$f882155fad14bf27)[plane].normal;\n        const projectedVector = this.target.clone().projectOnPlane(planeNormal);\n        const connectionGeometry = new (0, $ilwiq.BufferGeometry)().setFromPoints([\n            projectedVector,\n            this.target\n        ]);\n        return new (0, $ilwiq.Line)(connectionGeometry, lineMaterial).computeLineDistances();\n    }\n}\n\n\n\nclass $b36a0c8d207f18a7$export$a1a1936bf656b97b {\n    static #_ = this.uppercaseHeta = \"\\u0370\";\n    static #_1 = this.lowercaseHeta = \"\\u0371\";\n    static #_2 = this.uppercaseArchaicSampi = \"\\u0372\";\n    static #_3 = this.lowercaseArchaicSampi = \"\\u0373\";\n    static #_4 = this.numeralSign = \"\\u0374\";\n    static #_5 = this.lowerNumeralSign = \"\\u0375\";\n    static #_6 = this.uppercasePamphylianDigamma = \"\\u0376\";\n    static #_7 = this.lowercasePamphylianDigamma = \"\\u0377\";\n    static #_8 = this.ypogegrammeni = \"\\u037A\";\n    static #_9 = this.smallReversedLunateSigmaSymbol = \"\\u037B\";\n    static #_10 = this.smallDottedLunateSigmaSymbol = \"\\u037C\";\n    static #_11 = this.smallReversedDottedLunateSigmaSymbol = \"\\u037D\";\n    static #_12 = this.questionMark = \"\\u037E\";\n    static #_13 = this.uppercaseYot = \"\\u037F\";\n    static #_14 = this.acuteaccent = \"\\u0384\";\n    static #_15 = this.diaeresiswithacuteaccent = \"\\u0385\";\n    static #_16 = this.uppercaseAwithacuteaccent = \"\\u0386\";\n    static #_17 = this.anoTeleia = \"\\u0387\";\n    static #_18 = this.uppercaseEpsilonwithacuteaccent = \"\\u0388\";\n    static #_19 = this.uppercaseEtawithacuteaccent = \"\\u0389\";\n    static #_20 = this.uppercaseIotawithacuteaccent = \"\\u038A\";\n    static #_21 = this.uppercaseOmicronwithacuteaccent = \"\\u038C\";\n    static #_22 = this.uppercaseUpsilonwithacuteaccent = \"\\u038E\";\n    static #_23 = this.uppercaseOmegawithacuteaccent = \"\\u038F\";\n    static #_24 = this.lowercaseIotawithdiaeresisandacuteaccent = \"\\u0390\";\n    static #_25 = this.uppercaseAlpha = \"\\u0391\";\n    static #_26 = this.uppercaseBeta = \"\\u0392\";\n    static #_27 = this.uppercaseGamma = \"\\u0393\";\n    static #_28 = this.uppercaseDelta = \"\\u0394\";\n    static #_29 = this.uppercaseEpsilon = \"\\u0395\";\n    static #_30 = this.uppercaseZeta = \"\\u0396\";\n    static #_31 = this.uppercaseEta = \"\\u0397\";\n    static #_32 = this.uppercaseTheta = \"\\u0398\";\n    static #_33 = this.uppercaseIota = \"\\u0399\";\n    static #_34 = this.uppercaseKappa = \"\\u039A\";\n    static #_35 = this.uppercaseLambda = \"\\u039B\";\n    static #_36 = this.uppercaseMu = \"\\u039C\";\n    static #_37 = this.uppercaseNu = \"\\u039D\";\n    static #_38 = this.uppercaseXi = \"\\u039E\";\n    static #_39 = this.uppercaseOmicron = \"\\u039F\";\n    static #_40 = this.uppercasePi = \"\\u03A0\";\n    static #_41 = this.uppercaseRho = \"\\u03A1\";\n    static #_42 = this.uppercaseSigma = \"\\u03A3\";\n    static #_43 = this.uppercaseTau = \"\\u03A4\";\n    static #_44 = this.uppercaseUpsilon = \"\\u03A5\";\n    static #_45 = this.uppercasePhi = \"\\u03A6\";\n    static #_46 = this.uppercaseChi = \"\\u03A7\";\n    static #_47 = this.uppercasePsi = \"\\u03A8\";\n    static #_48 = this.uppercaseOmega = \"\\u03A9\";\n    static #_49 = this.uppercaseIotawithdiaeresis = \"\\u03AA\";\n    static #_50 = this.uppercaseUpsilonwithdiaeresis = \"\\u03AB\";\n    static #_51 = this.lowercaseAlphawithacuteaccent = \"\\u03AC\";\n    static #_52 = this.lowercaseEpsilonwithacuteaccent = \"\\u03AD\";\n    static #_53 = this.lowercaseEtawithacuteaccent = \"\\u03AE\";\n    static #_54 = this.lowercaseIotawithacuteaccent = \"\\u03AF\";\n    static #_55 = this.lowercaseUpsilonwithdiaeresisandacuteaccent = \"\\u03B0\";\n    static #_56 = this.lowercaseAlpha = \"\\u03B1\";\n    static #_57 = this.lowercaseBeta = \"\\u03B2\";\n    static #_58 = this.lowercaseGamma = \"\\u03B3\";\n    static #_59 = this.lowercaseDelta = \"\\u03B4\";\n    static #_60 = this.lowercaseEpsilon = \"\\u03B5\";\n    static #_61 = this.lowercaseZeta = \"\\u03B6\";\n    static #_62 = this.lowercaseEta = \"\\u03B7\";\n    static #_63 = this.lowercaseTheta = \"\\u03B8\";\n    static #_64 = this.lowercaseIota = \"\\u03B9\";\n    static #_65 = this.lowercaseKappa = \"\\u03BA\";\n    static #_66 = this.lowercaseLambda = \"\\u03BB\";\n    static #_67 = this.lowercaseMu = \"\\u03BC\";\n    static #_68 = this.lowercaseNu = \"\\u03BD\";\n    static #_69 = this.lowercaseXi = \"\\u03BE\";\n    static #_70 = this.lowercaseOmicron = \"\\u03BF\";\n    static #_71 = this.lowercasePi = \"\\u03C0\";\n    static #_72 = this.lowercaseRho = \"\\u03C1\";\n    static #_73 = this.lowercaseFinalSigma = \"\\u03C2\";\n    static #_74 = this.lowercaseSigma = \"\\u03C3\";\n    static #_75 = this.lowercaseTau = \"\\u03C4\";\n    static #_76 = this.lowercaseUpsilon = \"\\u03C5\";\n    static #_77 = this.lowercasePhi = \"\\u03C6\";\n    static #_78 = this.lowercaseChi = \"\\u03C7\";\n    static #_79 = this.lowercasePsi = \"\\u03C8\";\n    static #_80 = this.lowercaseOmega = \"\\u03C9\";\n    static #_81 = this.lowercaseIotawithdiaeresis = \"\\u03CA\";\n    static #_82 = this.lowercaseUpsilonwithdiaeresis = \"\\u03CB\";\n    static #_83 = this.lowercaseOmicronwithacuteaccent = \"\\u03CC\";\n    static #_84 = this.lowercaseUpsilonwithacuteaccent = \"\\u03CD\";\n    static #_85 = this.lowercaseOmegawithacuteaccent = \"\\u03CE\";\n    static #_86 = this.uppercaseKaiSymbol = \"\\u03CF\";\n    static #_87 = this.betaSymbol = \"\\u03D0\";\n    static #_88 = this.thetaSymbol = \"\\u03D1\";\n    static #_89 = this.upsilonwithhookSymbol = \"\\u03D2\";\n    static #_90 = this.upsilonwithacuteandhookSymbol = \"\\u03D3\";\n    static #_91 = this.upsilonwithdiaeresisandhookSymbol = \"\\u03D4\";\n    static #_92 = this.phiSymbol = \"\\u03D5\";\n    static #_93 = this.piSymbol = \"\\u03D6\";\n    static #_94 = this.kaiSymbol = \"\\u03D7\";\n    static #_95 = this.letterQoppa = \"\\u03D8\";\n    static #_96 = this.lowercaseQoppa = \"\\u03D9\";\n    static #_97 = this.letterStigma = \"\\u03DA\";\n    static #_98 = this.lowercaseStigma = \"\\u03DB\";\n    static #_99 = this.letterDigamma = \"\\u03DC\";\n    static #_100 = this.lowercaseDigamma = \"\\u03DD\";\n    static #_101 = this.letterKoppa = \"\\u03DE\";\n    static #_102 = this.lowercaseKoppa = \"\\u03DF\";\n    static #_103 = this.letterSampi = \"\\u03E0\";\n    static #_104 = this.lowercaseSampi = \"\\u03E1\";\n    static #_105 = this.copticuppercaseShei = \"\\u03E2\";\n    static #_106 = this.copticlowercaseShei = \"\\u03E3\";\n    static #_107 = this.copticuppercaseFei = \"\\u03E4\";\n    static #_108 = this.copticlowercaseFei = \"\\u03E5\";\n    static #_109 = this.copticuppercaseKhei = \"\\u03E6\";\n    static #_110 = this.copticlowercaseKhei = \"\\u03E7\";\n    static #_111 = this.copticuppercaseHori = \"\\u03E8\";\n    static #_112 = this.copticlowercaseHori = \"\\u03E9\";\n    static #_113 = this.copticuppercaseGangia = \"\\u03EA\";\n    static #_114 = this.copticlowercaseGangia = \"\\u03EB\";\n    static #_115 = this.copticuppercaseShima = \"\\u03EC\";\n    static #_116 = this.copticlowercaseShima = \"\\u03ED\";\n    static #_117 = this.copticuppercaseDei = \"\\u03EE\";\n    static #_118 = this.copticlowercaseDei = \"\\u03EF\";\n    static #_119 = this.kappaSymbol = \"\\u03F0\";\n    static #_120 = this.rhoSymbol = \"\\u03F1\";\n    static #_121 = this.lunateSigmaSymbol = \"\\u03F2\";\n    static #_122 = this.letterYot = \"\\u03F3\";\n    static #_123 = this.uppercaseThetaSymbol = \"\\u03F4\";\n    static #_124 = this.lunateEpsilonSymbol = \"\\u03F5\";\n    static #_125 = this.reversedLunateEpsilonSymbol = \"\\u03F6\";\n    static #_126 = this.uppercaseSho = \"\\u03F7\";\n    static #_127 = this.lowercaseSho = \"\\u03F8\";\n    static #_128 = this.uppercaseLunateSigmaSymbol = \"\\u03F9\";\n    static #_129 = this.uppercaseSan = \"\\u03FA\";\n    static #_130 = this.lowercaseSan = \"\\u03FB\";\n    static #_131 = this.rhowithstrokeSymbol = \"\\u03FC\";\n    static #_132 = this.uppercaseReversedLunateSigmaSymbol = \"\\u03FD\";\n    static #_133 = this.uppercaseDottedLunateSigmaSymbol = \"\\u03FE\";\n    static #_134 = this.uppercaseReversedDottedLunateSigmaSymbol = \"\\u03FF\";\n}\n\n\n\nvar $ilwiq = parcelRequire(\"ilwiq\");\nconst $9a8cebc34540b0c1$export$158a78f343a14874 = (n = 100, scale = 10)=>{\n    const points = [];\n    for(let index = 0; index < n; index++){\n        const x = Math.random() * scale;\n        const y = Math.random() * scale;\n        const z = Math.random() * scale;\n        points.push(new (0, $ilwiq.Vector3)(x, y, z));\n    }\n    return points;\n};\n\n\n\n\n//# sourceMappingURL=index.4162525c.js.map\n","export { Frame } from \"./frame\";\nexport { ScatterPlot } from \"./plots/scatterplot\";\nexport { VectorPlot } from \"./plots/vectorplot\";\nexport { Label } from \"./label\";\nexport { Greek } from \"./glyph\";\nexport { getRandomPoints } from \"./data\";\n","import { Color, PerspectiveCamera, Scene, WebGLRenderer } from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { Axes } from \"./axes\";\nimport { Plot } from \"./plot\";\nimport { Label } from \"./label\";\n\nexport class Frame extends Scene {\n  protected scene: Scene;\n  protected renderer: WebGLRenderer;\n  protected camera: PerspectiveCamera;\n  protected axes: Axes;\n  protected controls: OrbitControls;\n  protected observer: ResizeObserver = new ResizeObserver(() => this.onCanvasResize());\n  protected width: number;\n  protected height: number;\n\n  // TODO: at the moment only one size bc grid can only be squared\n  // look into this for solution https://discourse.threejs.org/t/rectangular-gridhelper-possibility/37812\n  constructor(protected canvas: HTMLCanvasElement, protected size = 10) {\n    super();\n    this.scene = new Scene();\n    this.scene.background = new Color(0xffffff);\n\n    const { clientWidth, clientHeight } = canvas;\n    this.width = clientWidth;\n    this.height = clientHeight;\n\n    this.renderer = new WebGLRenderer({ canvas });\n    this.renderer.setSize(clientWidth, clientHeight);\n\n    this.setCamera(clientWidth, clientHeight);\n    this.setControls();\n    this.setAxes();\n\n    this.updateOnChanges();\n    this.update();\n  }\n\n  private setCamera(width: number, height: number) {\n    this.camera = new PerspectiveCamera(45, width / height, 0.1, 1000);\n    this.camera.position.set(this.size * 1.5, this.size * 1.2, this.size * 2.5);\n    this.scene.add(this.camera);\n  }\n\n  private setControls() {\n    this.controls = new OrbitControls(this.camera, this.canvas);\n    this.controls.target.set(0, 0, 0);\n  }\n\n  private setAxes() {\n    this.axes = new Axes(this.size, this.size, this.size);\n\n    this.scene.add(this.axes.x);\n    this.scene.add(this.axes.y);\n    this.scene.add(this.axes.z);\n\n    this.scene.add(this.axes.gridXY);\n    this.scene.add(this.axes.gridXZ);\n    this.scene.add(this.axes.gridYZ);\n  }\n\n  updateOnChanges() {\n    this.controls.addEventListener(\"change\", () => this.update());\n    this.observer.observe(this.canvas);\n  }\n\n  protected update() {\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  public capture() {\n    const base64 = this.canvas.toDataURL(\"img/png\");\n  }\n\n  public async addPlot(plot: Plot) {\n    this.scene.add(...plot.getDrawables());\n    plot.getWritables().forEach((l) => this.addLabel(l));\n\n    this.update();\n  }\n\n  public addLabel(text: Label) {\n    this.scene.add(text);\n\n    text.addEventListener(\"synccomplete\", () => {\n      this.update();\n    });\n  }\n\n  private onCanvasResize() {\n    this.camera.aspect = this.width / this.height;\n    this.camera.updateProjectionMatrix();\n    this.renderer.setSize(this.width, this.height);\n    this.update();\n  }\n}\n","import { ArrowHelper, GridHelper, Vector3 } from \"three\";\n\nexport const UnitVector = {\n  i: new Vector3(1, 0, 0),\n  j: new Vector3(0, 1, 0),\n  k: new Vector3(0, 0, 1),\n} as const;\n\nexport const PlaneAxes = {\n  xy: { normal: UnitVector.k, unit: { x: UnitVector.i, y: UnitVector.j } },\n  xz: { normal: UnitVector.j, unit: { x: UnitVector.i, z: UnitVector.k } },\n  yz: { normal: UnitVector.i, unit: { y: UnitVector.j, z: UnitVector.k } },\n} as const;\n\nclass Axis extends ArrowHelper {\n  constructor(direction: Vector3, length: number) {\n    super(direction, new Vector3(0, 0, 0), length);\n  }\n}\n\nexport class Axes {\n  public x: Axis;\n  public y: Axis;\n  public z: Axis;\n  public gridXZ: GridHelper;\n  public gridXY: GridHelper;\n  public gridYZ: GridHelper;\n\n  constructor(\n    private lengthX: number,\n    private lengthY: number,\n    private lengthZ: number\n  ) {\n    this.x = new Axis(new Vector3(1, 0, 0), this.lengthX * 1.1);\n    this.y = new Axis(new Vector3(0, 1, 0), this.lengthY * 1.1);\n    this.z = new Axis(new Vector3(0, 0, 1), this.lengthZ * 1.1);\n\n    this.setGrids();\n  }\n\n  private setGrids() {\n    this.gridXZ = new GridHelper(Math.max(this.lengthX, this.lengthZ));\n    this.gridXZ.position.setX(this.lengthX / 2);\n    this.gridXZ.position.setZ(this.lengthZ / 2);\n\n    this.gridXY = new GridHelper(Math.max(this.lengthX, this.lengthY));\n    this.gridXY.position.setX(this.lengthX / 2);\n    this.gridXY.position.setY(this.lengthY / 2);\n    this.gridXY.rotateOnAxis(new Vector3(1, 0, 0), Math.PI / 2);\n\n    this.gridYZ = new GridHelper(Math.max(this.lengthY, this.lengthZ));\n    this.gridYZ.position.setY(this.lengthY / 2);\n    this.gridYZ.position.setZ(this.lengthZ / 2);\n    this.gridYZ.rotateOnAxis(new Vector3(0, 0, 1), Math.PI / 2);\n  }\n}\n","import { Mesh, MeshBasicMaterial, SphereGeometry, Vector3 } from \"three\";\nimport { Plot } from \"../plot\";\n\nexport class ScatterPlot extends Plot {\n  constructor(points: Vector3[], pointRadius = 0.2) {\n    super();\n\n    this.drawables = points.map((v) => {\n      const geometry = new SphereGeometry(pointRadius);\n      const material = new MeshBasicMaterial({ color: 0x00ff00 });\n      const obj = new Mesh(geometry, material);\n      obj.position.set(v.x, v.y, v.z);\n      return obj;\n    });\n  }\n}\n","import { Object3D } from \"three\";\nimport { Label } from \"./label\";\n\nexport interface FramedObject {\n  getDrawables(): Object3D[];\n  getWritables(): Label[];\n}\n\nexport abstract class Plot implements FramedObject {\n  protected drawables: Object3D[];\n  protected writables: Label[];\n\n  public getDrawables(): Object3D[] {\n    return this.drawables;\n  }\n\n  public getWritables(): Label[] {\n    return this.writables;\n  }\n\n  constructor() {\n    this.drawables = [];\n    this.writables = [];\n  }\n}\n","import {\n  ArrowHelper,\n  Box3,\n  BoxHelper,\n  BufferGeometry,\n  EllipseCurve,\n  Line,\n  LineBasicMaterial,\n  LineDashedMaterial,\n  Mesh,\n  Object3D,\n  Quaternion,\n  Vector3,\n} from \"three\";\nimport { PlaneAxes, UnitVector } from \"../axes\";\nimport { Label, LabelProperties } from \"../label\";\nimport { Plot } from \"../plot\";\nimport { LineStyle } from \"./line.config\";\nimport { VectorPlotConfiguration } from \"./vectorplot.config\";\nimport { VectorPlotConfigurationParams } from \"./vectorplot.params\";\n\nexport class VectorPlot extends Plot {\n  private config: VectorPlotConfigurationParams;\n\n  constructor(private origin: Vector3, private target: Vector3, config?: VectorPlotConfiguration) {\n    super();\n\n    this.config = new VectorPlotConfigurationParams(config);\n\n    const vector = this.createVector(origin, target);\n    this.drawables.push(vector);\n\n    if (this.config.label) this.writables.push(this.createLabel(vector, this.config.label));\n    if (this.config.angle) {\n      const mainAngle = this.createAngleToTarget(\"y\", this.config?.angle?.line);\n      this.drawables.push(mainAngle);\n      if (this.config.angle?.label) this.writables.push(this.createLabel(mainAngle, this.config.angle.label));\n    }\n\n    for (const p in PlaneAxes) {\n      const plane = p as keyof typeof PlaneAxes;\n      const conf = this.config[plane];\n\n      if (conf?.projection) {\n        const projection = this.createProjection(plane, conf.projection.line);\n        if (conf.projection.label) {\n          this.writables.push(this.createLabel(projection, conf.projection.label));\n        }\n        this.drawables.push(projection);\n      }\n\n      if (conf?.component) {\n        const component = this.createComponent(plane, conf.component.line);\n        if (conf.component.label) {\n          this.writables.push(this.createLabel(component, conf.component.label));\n        }\n        this.drawables.push(component);\n      }\n\n      if (conf?.projectionAngle) {\n        const projectionAngle = this.createAngleToProjection(plane, conf.projectionAngle.line);\n        if (conf.projectionAngle.label) {\n          this.writables.push(this.createLabel(projectionAngle, conf.projectionAngle.label));\n        }\n\n        this.drawables.push(projectionAngle);\n      }\n    }\n  }\n\n  private createVector(origin: Vector3, target: Vector3) {\n    const length = Math.abs(origin.distanceTo(target));\n\n    return new ArrowHelper(target.clone().normalize(), origin, length, this.config.color, length * 0.2, length * 0.1);\n  }\n\n  private createAngleToProjection<P extends keyof typeof PlaneAxes>(planeIdx: P, config: LineStyle) {\n    const plane = PlaneAxes[planeIdx];\n    const planeNormal = plane.normal;\n    const projectedVector = this.target.clone().projectOnPlane(planeNormal);\n    const radius = projectedVector.distanceTo(this.origin) * 0.5;\n\n    let initialRotation = 0;\n    let angleToProjection = projectedVector.angleTo(UnitVector.i);\n\n    if (planeIdx === \"xz\") {\n      initialRotation = -Math.PI / 2;\n      angleToProjection = projectedVector.angleTo(UnitVector.k);\n    }\n\n    if (planeIdx === \"yz\") {\n      initialRotation = Math.PI / 2;\n      angleToProjection = projectedVector.angleTo(UnitVector.j);\n    }\n\n    const curve = new EllipseCurve(\n      this.origin.x,\n      this.origin.y,\n      radius,\n      radius,\n      0,\n      angleToProjection,\n      false,\n      initialRotation\n    );\n\n    const { type: linetype, style: linestyle } = config;\n    const LineMaterialType = linetype === \"dashed\" ? LineDashedMaterial : LineBasicMaterial;\n    const material = new LineMaterialType(linestyle);\n    const geometry = new BufferGeometry().setFromPoints(curve.getPoints(50));\n\n    const rotation = new Quaternion().setFromUnitVectors(UnitVector.k, plane.normal);\n\n    geometry.applyQuaternion(rotation);\n\n    return new Line(geometry, material);\n  }\n\n  private createAngleToTarget(axis: \"x\" | \"y\" | \"z\", config: LineStyle) {\n    const radius = this.target.clone().distanceTo(this.origin);\n\n    const projectedVector = this.target.clone().projectOnPlane(UnitVector.j);\n\n    const curve = new EllipseCurve(\n      this.origin.x,\n      this.origin.y,\n      radius,\n      radius,\n      0,\n      this.target.angleTo(projectedVector),\n      false,\n      0\n    );\n\n    const { type: linetype, style: linestyle } = config;\n\n    const LineMaterialType = linetype === \"dashed\" ? LineDashedMaterial : LineBasicMaterial;\n\n    const material = new LineMaterialType(linestyle);\n    const geometry = new BufferGeometry().setFromPoints(curve.getPoints(50));\n    geometry.applyQuaternion(new Quaternion().setFromAxisAngle(UnitVector.j, -UnitVector.i.angleTo(projectedVector)));\n\n    return new Line(geometry, material);\n  }\n\n  private createProjection<P extends keyof typeof PlaneAxes>(plane: P, config: LineStyle): Line {\n    const { type: linetype, style: linestyle } = config;\n\n    const LineMaterialType = linetype === \"dashed\" ? LineDashedMaterial : LineBasicMaterial;\n\n    const lineMaterial = new LineMaterialType(linestyle);\n\n    const planeNormal = PlaneAxes[plane].normal;\n\n    const projectedVector = this.target.clone().projectOnPlane(planeNormal);\n\n    const projectionGeometry = new BufferGeometry().setFromPoints([projectedVector, this.origin]);\n\n    return new Line(projectionGeometry, lineMaterial).computeLineDistances();\n  }\n\n  private createLabel(obj: Object3D, config: LabelProperties): Label {\n    const box = new BoxHelper(obj);\n    box.geometry.computeBoundingBox();\n\n    const bbox = box.geometry.boundingBox as Box3;\n\n    return new Label(bbox.max, { ...config });\n  }\n\n  private createComponent<P extends keyof typeof PlaneAxes>(plane: P, config: LineStyle): Line {\n    const { type: linetype, style: linestyle } = config;\n    const LineMaterialType = linetype === \"dashed\" ? LineDashedMaterial : LineBasicMaterial;\n    const lineMaterial = new LineMaterialType(linestyle);\n\n    const planeNormal = PlaneAxes[plane].normal;\n    const projectedVector = this.target.clone().projectOnPlane(planeNormal);\n    const connectionGeometry = new BufferGeometry().setFromPoints([projectedVector, this.target]);\n\n    return new Line(connectionGeometry, lineMaterial).computeLineDistances();\n  }\n}\n","import { Vector3 } from \"three\";\nimport { Text } from \"troika-three-text\";\n\n// TODO: I currently had to duplicate this interface in order to get autocompletion when using the lib\n// I was using a dynamically generated type from my augmented Text but it wasn't being carried in the compiled lib\n// I tried placing this interface in the text.d.ts but it wasn't being exported in this case neither. \n// This second option can probabily be achieved by explicitating types to be bundler but I currently don't know how\n// this is a duplication hence inherently bad but the type is not changing since its third-party \nexport interface LabelProperties {\n  text: string;\n\n  color?: number;\n  fontSize?: number;\n  anchorX?: number | \"left\" | \"center\" | \"right\";\n  anchorY?: number | \"top\" | \"top-baseline\" | \"top-cap\" | \"top-ex\" | \"middle\" | \"bottom-baseline\" | \"bottom\";\n  clipRect?: [number, number, number, number];\n  curveRadius?: number;\n  depthOffset?: number;\n  fillOpacity?: number; // 0 - 1,\n  font?: string; // url to .ttf, .otf, .woff\n  fontStyle?: \"normal\" | \"italic\";\n  fontWeight?: \"normal\" | \"bold\";\n  glyphGeometryDetail?: number;\n  letterSpacing?: number;\n  lineHeight?: \"normal\" | number;\n  maxWidth?: number;\n  outlineBlur?: number;\n  outlineColor?: number;\n  outlineOffsetX?: number;\n  outlineOffsetY?: number;\n  outlineOpacity?: number;\n  outlineWidth?: number;\n  overflowWrap?: \"normal\" | \"break-word\";\n  strokeColor?: number;\n  strokeOpacity?: number; // 0 - 1\n  strokeWidth?: number;\n  textAlign?: \"left\" | \"right\" | \"center\" | \"justify\";\n  textIndent?: number;\n  whiteSpace?: \"normal\" | \"nowrap\";\n}\n\nexport class Label extends Text {\n  constructor(position: Vector3, params: LabelProperties) {\n    super();\n    this.text = params.text;\n    this.fontSize = params.fontSize || 1;\n    this.position.x = position.x;\n    this.position.y = position.y;\n    this.position.z = position.z;\n    this.anchorX = params.anchorX || \"center\";\n    this.anchorY = params.anchorY || \"middle\";\n    this.color = params.color || 0x000000;\n  }\n}\n\n\n","import { LabelProperties } from \"../label\";\nimport { ConfigParams } from \"./base.config\";\nimport { LineConfig, LineStyle } from \"./line.config\";\nimport {\n  VectorPlotConfiguration,\n  VectorPlotPlaneConfig,\n  defaultPrimaryLine,\n  defaultSecondaryLine,\n} from \"./vectorplot.config\";\n\nexport class VectorPlotConfigurationParams extends ConfigParams implements VectorPlotConfiguration {\n  color: number;\n  label?: LabelProperties;\n  angle?: LineConfigParams;\n  xy?: VectorPlotPlaneConfigParams;\n  xz?: VectorPlotPlaneConfigParams;\n  yz?: VectorPlotPlaneConfigParams;\n\n  constructor(config: VectorPlotConfiguration | undefined) {\n    super();\n    const { angle, color, label, xy, xz, yz } = config || {};\n    this.color = color || 0x000000;\n    this.label = label;\n\n    if (angle) this.angle = new LineConfigParams(this.valueOrDefault(angle, defaultPrimaryLine));\n    if (xy) this.xy = new VectorPlotPlaneConfigParams(xy);\n    if (xz) this.xz = new VectorPlotPlaneConfigParams(xz);\n    if (yz) this.yz = new VectorPlotPlaneConfigParams(yz);\n  }\n}\n\nexport class VectorPlotPlaneConfigParams extends ConfigParams implements VectorPlotPlaneConfig {\n  projection?: LineConfigParams;\n  component?: LineConfigParams;\n  projectionAngle?: LineConfigParams;\n\n  constructor(plane: VectorPlotPlaneConfig | true) {\n    super();\n\n    plane = this.valueOrDefault(plane, { projection: true, component: true, projectionAngle: true });\n    const { component, projection, projectionAngle } = plane;\n\n    if (projection) this.projection = new LineConfigParams(this.valueOrDefault(projection, defaultSecondaryLine));\n    if (component) this.component = new LineConfigParams(this.valueOrDefault(component, defaultSecondaryLine));\n    if (projectionAngle)\n      this.projectionAngle = new LineConfigParams(this.valueOrDefault(projectionAngle, defaultSecondaryLine));\n  }\n}\n\ntype VectorPlotLineConfig = LineConfig & Required<Pick<LineConfig, \"line\">>;\n\nexport class LineConfigParams extends ConfigParams implements VectorPlotLineConfig {\n  line: LineStyle;\n  label?: LabelProperties;\n\n  constructor({ line, label }: LineConfig) {\n    super();\n\n    this.line = line || defaultSecondaryLine.line;\n    this.label = label;\n  }\n}\n","export class ConfigParams {\n  protected valueOrDefault<T, D = T>(value: T | true, defaultValue: D) {\n    return value === true ? defaultValue : value;\n  }\n}\n","import { PlaneAxes } from \"../axes\";\nimport { LabelProperties } from \"../label\";\nimport { LineConfig } from \"./line.config\";\n\nexport const defaultPrimaryLine = {\n  line: {\n    type: \"solid\",\n    style: {\n      color: 0x000000,\n    },\n  },\n} as const;\n\nexport const defaultSecondaryLine = {\n  line: {\n    type: \"dashed\",\n    style: {\n      color: 0x000000,\n      scale: 1,\n      dashSize: 0.25,\n      gapSize: 0.1,\n    },\n  },\n} as const;\n\nexport interface VectorPlotPlaneConfig {\n  projection?: LineConfig | boolean;\n  component?: LineConfig | boolean;\n  projectionAngle?: LineConfig | boolean;\n}\n\nexport interface VectorPlotConfiguration\n  extends Partial<Record<keyof typeof PlaneAxes, VectorPlotPlaneConfig | boolean>> {\n  label?: LabelProperties;\n  color?: number;\n  angle?: LineConfig | boolean;\n}\n","export class Greek {\n  public static uppercaseHeta = \"\\u{0370}\";\n  public static lowercaseHeta = \"\\u{0371}\";\n  public static uppercaseArchaicSampi = \"\\u{0372}\";\n  public static lowercaseArchaicSampi = \"\\u{0373}\";\n  public static numeralSign = \"\\u{0374}\";\n  public static lowerNumeralSign = \"\\u{0375}\";\n  public static uppercasePamphylianDigamma = \"\\u{0376}\";\n  public static lowercasePamphylianDigamma = \"\\u{0377}\";\n  public static ypogegrammeni = \"\\u{037A}\";\n  public static smallReversedLunateSigmaSymbol = \"\\u{037B}\";\n  public static smallDottedLunateSigmaSymbol = \"\\u{037C}\";\n  public static smallReversedDottedLunateSigmaSymbol = \"\\u{037D}\";\n  public static questionMark = \"\\u{037E}\";\n  public static uppercaseYot = \"\\u{037F}\";\n  public static acuteaccent = \"\\u{0384}\";\n  public static diaeresiswithacuteaccent = \"\\u{0385}\";\n  public static uppercaseAwithacuteaccent = \"\\u{0386}\";\n  public static anoTeleia = \"\\u{0387}\";\n  public static uppercaseEpsilonwithacuteaccent = \"\\u{0388}\";\n  public static uppercaseEtawithacuteaccent = \"\\u{0389}\";\n  public static uppercaseIotawithacuteaccent = \"\\u{038A}\";\n  public static uppercaseOmicronwithacuteaccent = \"\\u{038C}\";\n  public static uppercaseUpsilonwithacuteaccent = \"\\u{038E}\";\n  public static uppercaseOmegawithacuteaccent = \"\\u{038F}\";\n  public static lowercaseIotawithdiaeresisandacuteaccent = \"\\u{0390}\";\n  public static uppercaseAlpha = \"\\u{0391}\";\n  public static uppercaseBeta = \"\\u{0392}\";\n  public static uppercaseGamma = \"\\u{0393}\";\n  public static uppercaseDelta = \"\\u{0394}\";\n  public static uppercaseEpsilon = \"\\u{0395}\";\n  public static uppercaseZeta = \"\\u{0396}\";\n  public static uppercaseEta = \"\\u{0397}\";\n  public static uppercaseTheta = \"\\u{0398}\";\n  public static uppercaseIota = \"\\u{0399}\";\n  public static uppercaseKappa = \"\\u{039A}\";\n  public static uppercaseLambda = \"\\u{039B}\";\n  public static uppercaseMu = \"\\u{039C}\";\n  public static uppercaseNu = \"\\u{039D}\";\n  public static uppercaseXi = \"\\u{039E}\";\n  public static uppercaseOmicron = \"\\u{039F}\";\n  public static uppercasePi = \"\\u{03A0}\";\n  public static uppercaseRho = \"\\u{03A1}\";\n  public static uppercaseSigma = \"\\u{03A3}\";\n  public static uppercaseTau = \"\\u{03A4}\";\n  public static uppercaseUpsilon = \"\\u{03A5}\";\n  public static uppercasePhi = \"\\u{03A6}\";\n  public static uppercaseChi = \"\\u{03A7}\";\n  public static uppercasePsi = \"\\u{03A8}\";\n  public static uppercaseOmega = \"\\u{03A9}\";\n  public static uppercaseIotawithdiaeresis = \"\\u{03AA}\";\n  public static uppercaseUpsilonwithdiaeresis = \"\\u{03AB}\";\n  public static lowercaseAlphawithacuteaccent = \"\\u{03AC}\";\n  public static lowercaseEpsilonwithacuteaccent = \"\\u{03AD}\";\n  public static lowercaseEtawithacuteaccent = \"\\u{03AE}\";\n  public static lowercaseIotawithacuteaccent = \"\\u{03AF}\";\n  public static lowercaseUpsilonwithdiaeresisandacuteaccent = \"\\u{03B0}\";\n  public static lowercaseAlpha = \"\\u{03B1}\";\n  public static lowercaseBeta = \"\\u{03B2}\";\n  public static lowercaseGamma = \"\\u{03B3}\";\n  public static lowercaseDelta = \"\\u{03B4}\";\n  public static lowercaseEpsilon = \"\\u{03B5}\";\n  public static lowercaseZeta = \"\\u{03B6}\";\n  public static lowercaseEta = \"\\u{03B7}\";\n  public static lowercaseTheta = \"\\u{03B8}\";\n  public static lowercaseIota = \"\\u{03B9}\";\n  public static lowercaseKappa = \"\\u{03BA}\";\n  public static lowercaseLambda = \"\\u{03BB}\";\n  public static lowercaseMu = \"\\u{03BC}\";\n  public static lowercaseNu = \"\\u{03BD}\";\n  public static lowercaseXi = \"\\u{03BE}\";\n  public static lowercaseOmicron = \"\\u{03BF}\";\n  public static lowercasePi = \"\\u{03C0}\";\n  public static lowercaseRho = \"\\u{03C1}\";\n  public static lowercaseFinalSigma = \"\\u{03C2}\";\n  public static lowercaseSigma = \"\\u{03C3}\";\n  public static lowercaseTau = \"\\u{03C4}\";\n  public static lowercaseUpsilon = \"\\u{03C5}\";\n  public static lowercasePhi = \"\\u{03C6}\";\n  public static lowercaseChi = \"\\u{03C7}\";\n  public static lowercasePsi = \"\\u{03C8}\";\n  public static lowercaseOmega = \"\\u{03C9}\";\n  public static lowercaseIotawithdiaeresis = \"\\u{03CA}\";\n  public static lowercaseUpsilonwithdiaeresis = \"\\u{03CB}\";\n  public static lowercaseOmicronwithacuteaccent = \"\\u{03CC}\";\n  public static lowercaseUpsilonwithacuteaccent = \"\\u{03CD}\";\n  public static lowercaseOmegawithacuteaccent = \"\\u{03CE}\";\n  public static uppercaseKaiSymbol = \"\\u{03CF}\";\n  public static betaSymbol = \"\\u{03D0}\";\n  public static thetaSymbol = \"\\u{03D1}\";\n  public static upsilonwithhookSymbol = \"\\u{03D2}\";\n  public static upsilonwithacuteandhookSymbol = \"\\u{03D3}\";\n  public static upsilonwithdiaeresisandhookSymbol = \"\\u{03D4}\";\n  public static phiSymbol = \"\\u{03D5}\";\n  public static piSymbol = \"\\u{03D6}\";\n  public static kaiSymbol = \"\\u{03D7}\";\n  public static letterQoppa = \"\\u{03D8}\";\n  public static lowercaseQoppa = \"\\u{03D9}\";\n  public static letterStigma = \"\\u{03DA}\";\n  public static lowercaseStigma = \"\\u{03DB}\";\n  public static letterDigamma = \"\\u{03DC}\";\n  public static lowercaseDigamma = \"\\u{03DD}\";\n  public static letterKoppa = \"\\u{03DE}\";\n  public static lowercaseKoppa = \"\\u{03DF}\";\n  public static letterSampi = \"\\u{03E0}\";\n  public static lowercaseSampi = \"\\u{03E1}\";\n  public static copticuppercaseShei = \"\\u{03E2}\";\n  public static copticlowercaseShei = \"\\u{03E3}\";\n  public static copticuppercaseFei = \"\\u{03E4}\";\n  public static copticlowercaseFei = \"\\u{03E5}\";\n  public static copticuppercaseKhei = \"\\u{03E6}\";\n  public static copticlowercaseKhei = \"\\u{03E7}\";\n  public static copticuppercaseHori = \"\\u{03E8}\";\n  public static copticlowercaseHori = \"\\u{03E9}\";\n  public static copticuppercaseGangia = \"\\u{03EA}\";\n  public static copticlowercaseGangia = \"\\u{03EB}\";\n  public static copticuppercaseShima = \"\\u{03EC}\";\n  public static copticlowercaseShima = \"\\u{03ED}\";\n  public static copticuppercaseDei = \"\\u{03EE}\";\n  public static copticlowercaseDei = \"\\u{03EF}\";\n  public static kappaSymbol = \"\\u{03F0}\";\n  public static rhoSymbol = \"\\u{03F1}\";\n  public static lunateSigmaSymbol = \"\\u{03F2}\";\n  public static letterYot = \"\\u{03F3}\";\n  public static uppercaseThetaSymbol = \"\\u{03F4}\";\n  public static lunateEpsilonSymbol = \"\\u{03F5}\";\n  public static reversedLunateEpsilonSymbol = \"\\u{03F6}\";\n  public static uppercaseSho = \"\\u{03F7}\";\n  public static lowercaseSho = \"\\u{03F8}\";\n  public static uppercaseLunateSigmaSymbol = \"\\u{03F9}\";\n  public static uppercaseSan = \"\\u{03FA}\";\n  public static lowercaseSan = \"\\u{03FB}\";\n  public static rhowithstrokeSymbol = \"\\u{03FC}\";\n  public static uppercaseReversedLunateSigmaSymbol = \"\\u{03FD}\";\n  public static uppercaseDottedLunateSigmaSymbol = \"\\u{03FE}\";\n  public static uppercaseReversedDottedLunateSigmaSymbol = \"\\u{03FF}\";\n}\n","import { Vector3 } from \"three\";\n\nexport const getRandomPoints = (n = 100, scale = 10): Vector3[] => {\n  const points: Vector3[] = [];\n  for (let index = 0; index < n; index++) {\n    const x = Math.random() * scale;\n    const y = Math.random() * scale;\n    const z = Math.random() * scale;\n\n    points.push(new Vector3(x, y, z));\n  }\n\n  return points;\n};\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$ilwiq","$06989a4a8159123e$export$60bbd10bdffb2e81","i","Vector3","j","k","$b36a0c8d207f18a7$export$a1a1936bf656b97b","_","uppercaseHeta","_1","lowercaseHeta","_2","uppercaseArchaicSampi","_3","lowercaseArchaicSampi","_4","numeralSign","_5","lowerNumeralSign","_6","uppercasePamphylianDigamma","_7","lowercasePamphylianDigamma","_8","ypogegrammeni","_9","smallReversedLunateSigmaSymbol","_10","smallDottedLunateSigmaSymbol","_11","smallReversedDottedLunateSigmaSymbol","_12","questionMark","_13","uppercaseYot","_14","acuteaccent","_15","diaeresiswithacuteaccent","_16","uppercaseAwithacuteaccent","_17","anoTeleia","_18","uppercaseEpsilonwithacuteaccent","_19","uppercaseEtawithacuteaccent","_20","uppercaseIotawithacuteaccent","_21","uppercaseOmicronwithacuteaccent","_22","uppercaseUpsilonwithacuteaccent","_23","uppercaseOmegawithacuteaccent","_24","lowercaseIotawithdiaeresisandacuteaccent","_25","uppercaseAlpha","_26","uppercaseBeta","_27","uppercaseGamma","_28","uppercaseDelta","_29","uppercaseEpsilon","_30","uppercaseZeta","_31","uppercaseEta","_32","uppercaseTheta","_33","uppercaseIota","_34","uppercaseKappa","_35","uppercaseLambda","_36","uppercaseMu","_37","uppercaseNu","_38","uppercaseXi","_39","uppercaseOmicron","_40","uppercasePi","_41","uppercaseRho","_42","uppercaseSigma","_43","uppercaseTau","_44","uppercaseUpsilon","_45","uppercasePhi","_46","uppercaseChi","_47","uppercasePsi","_48","uppercaseOmega","_49","uppercaseIotawithdiaeresis","_50","uppercaseUpsilonwithdiaeresis","_51","lowercaseAlphawithacuteaccent","_52","lowercaseEpsilonwithacuteaccent","_53","lowercaseEtawithacuteaccent","_54","lowercaseIotawithacuteaccent","_55","lowercaseUpsilonwithdiaeresisandacuteaccent","_56","lowercaseAlpha","_57","lowercaseBeta","_58","lowercaseGamma","_59","lowercaseDelta","_60","lowercaseEpsilon","_61","lowercaseZeta","_62","lowercaseEta","_63","lowercaseTheta","_64","lowercaseIota","_65","lowercaseKappa","_66","lowercaseLambda","_67","lowercaseMu","_68","lowercaseNu","_69","lowercaseXi","_70","lowercaseOmicron","_71","lowercasePi","_72","lowercaseRho","_73","lowercaseFinalSigma","_74","lowercaseSigma","_75","lowercaseTau","_76","lowercaseUpsilon","_77","lowercasePhi","_78","lowercaseChi","_79","lowercasePsi","_80","lowercaseOmega","_81","lowercaseIotawithdiaeresis","_82","lowercaseUpsilonwithdiaeresis","_83","lowercaseOmicronwithacuteaccent","_84","lowercaseUpsilonwithacuteaccent","_85","lowercaseOmegawithacuteaccent","_86","uppercaseKaiSymbol","_87","betaSymbol","_88","thetaSymbol","_89","upsilonwithhookSymbol","_90","upsilonwithacuteandhookSymbol","_91","upsilonwithdiaeresisandhookSymbol","_92","phiSymbol","_93","piSymbol","_94","kaiSymbol","_95","letterQoppa","_96","lowercaseQoppa","_97","letterStigma","_98","lowercaseStigma","_99","letterDigamma","_100","lowercaseDigamma","_101","letterKoppa","_102","lowercaseKoppa","_103","letterSampi","_104","lowercaseSampi","_105","copticuppercaseShei","_106","copticlowercaseShei","_107","copticuppercaseFei","_108","copticlowercaseFei","_109","copticuppercaseKhei","_110","copticlowercaseKhei","_111","copticuppercaseHori","_112","copticlowercaseHori","_113","copticuppercaseGangia","_114","copticlowercaseGangia","_115","copticuppercaseShima","_116","copticlowercaseShima","_117","copticuppercaseDei","_118","copticlowercaseDei","_119","kappaSymbol","_120","rhoSymbol","_121","lunateSigmaSymbol","_122","letterYot","_123","uppercaseThetaSymbol","_124","lunateEpsilonSymbol","_125","reversedLunateEpsilonSymbol","_126","uppercaseSho","_127","lowercaseSho","_128","uppercaseLunateSigmaSymbol","_129","uppercaseSan","_130","lowercaseSan","_131","rhowithstrokeSymbol","_132","uppercaseReversedLunateSigmaSymbol","_133","uppercaseDottedLunateSigmaSymbol","_134","uppercaseReversedDottedLunateSigmaSymbol"],"version":3,"file":"index.4162525c.js.map"}